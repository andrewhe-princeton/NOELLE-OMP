; ModuleID = 'search-a-list.c'
source_filename = "search-a-list.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [4 x i8] c"Zig\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"Zag\00", align 1
@.str.2 = private unnamed_addr constant [6 x i8] c"Wally\00", align 1
@.str.3 = private unnamed_addr constant [7 x i8] c"Ronald\00", align 1
@.str.4 = private unnamed_addr constant [5 x i8] c"Bush\00", align 1
@.str.5 = private unnamed_addr constant [7 x i8] c"Krusty\00", align 1
@.str.6 = private unnamed_addr constant [8 x i8] c"Charlie\00", align 1
@.str.7 = private unnamed_addr constant [4 x i8] c"Boz\00", align 1
@haystack = dso_local global [11 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i8* null], align 16, !dbg !0
@.str.8 = private unnamed_addr constant [15 x i8] c"Bush is at %d\0A\00", align 1
@.str.9 = private unnamed_addr constant [11 x i8] c"Washington\00", align 1
@.str.10 = private unnamed_addr constant [35 x i8] c"Washington is not in the haystack\0A\00", align 1
@.str.11 = private unnamed_addr constant [25 x i8] c"First index for Zag: %d\0A\00", align 1
@.str.12 = private unnamed_addr constant [24 x i8] c"Last index for Zag: %d\0A\00", align 1

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @search_needle(i8* %needle, i8** %hs) #0 !dbg !18 {
entry:
  %retval = alloca i32, align 4
  %needle.addr = alloca i8*, align 8
  %hs.addr = alloca i8**, align 8
  %i = alloca i32, align 4
  store i8* %needle, i8** %needle.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %needle.addr, metadata !23, metadata !DIExpression()), !dbg !24
  store i8** %hs, i8*** %hs.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %hs.addr, metadata !25, metadata !DIExpression()), !dbg !26
  call void @llvm.dbg.declare(metadata i32* %i, metadata !27, metadata !DIExpression()), !dbg !28
  store i32 0, i32* %i, align 4, !dbg !28
  br label %while.cond, !dbg !29

while.cond:                                       ; preds = %if.end, %entry
  %0 = load i8**, i8*** %hs.addr, align 8, !dbg !30
  %1 = load i32, i32* %i, align 4, !dbg !31
  %idxprom = sext i32 %1 to i64, !dbg !30
  %arrayidx = getelementptr inbounds i8*, i8** %0, i64 %idxprom, !dbg !30
  %2 = load i8*, i8** %arrayidx, align 8, !dbg !30
  %cmp = icmp ne i8* %2, null, !dbg !32
  br i1 %cmp, label %while.body, label %while.end, !dbg !29

while.body:                                       ; preds = %while.cond
  %3 = load i8**, i8*** %hs.addr, align 8, !dbg !33
  %4 = load i32, i32* %i, align 4, !dbg !36
  %idxprom1 = sext i32 %4 to i64, !dbg !33
  %arrayidx2 = getelementptr inbounds i8*, i8** %3, i64 %idxprom1, !dbg !33
  %5 = load i8*, i8** %arrayidx2, align 8, !dbg !33
  %6 = load i8*, i8** %needle.addr, align 8, !dbg !37
  %call = call i32 @strcmp(i8* %5, i8* %6) #4, !dbg !38
  %cmp3 = icmp eq i32 %call, 0, !dbg !39
  br i1 %cmp3, label %if.then, label %if.end, !dbg !40

if.then:                                          ; preds = %while.body
  %7 = load i32, i32* %i, align 4, !dbg !41
  store i32 %7, i32* %retval, align 4, !dbg !42
  br label %return, !dbg !42

if.end:                                           ; preds = %while.body
  %8 = load i32, i32* %i, align 4, !dbg !43
  %inc = add nsw i32 %8, 1, !dbg !43
  store i32 %inc, i32* %i, align 4, !dbg !43
  br label %while.cond, !dbg !29, !llvm.loop !44

while.end:                                        ; preds = %while.cond
  store i32 -1, i32* %retval, align 4, !dbg !46
  br label %return, !dbg !46

return:                                           ; preds = %while.end, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !47
  ret i32 %9, !dbg !47
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nounwind readonly
declare dso_local i32 @strcmp(i8*, i8*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @search_last_needle(i8* %needle, i8** %hs) #0 !dbg !48 {
entry:
  %retval = alloca i32, align 4
  %needle.addr = alloca i8*, align 8
  %hs.addr = alloca i8**, align 8
  %i = alloca i32, align 4
  %last = alloca i32, align 4
  store i8* %needle, i8** %needle.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %needle.addr, metadata !49, metadata !DIExpression()), !dbg !50
  store i8** %hs, i8*** %hs.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %hs.addr, metadata !51, metadata !DIExpression()), !dbg !52
  call void @llvm.dbg.declare(metadata i32* %i, metadata !53, metadata !DIExpression()), !dbg !54
  call void @llvm.dbg.declare(metadata i32* %last, metadata !55, metadata !DIExpression()), !dbg !56
  store i32 0, i32* %last, align 4, !dbg !56
  %0 = load i8*, i8** %needle.addr, align 8, !dbg !57
  %1 = load i8**, i8*** %hs.addr, align 8, !dbg !58
  %call = call i32 @search_needle(i8* %0, i8** %1), !dbg !59
  store i32 %call, i32* %last, align 4, !dbg !60
  store i32 %call, i32* %i, align 4, !dbg !61
  %2 = load i32, i32* %last, align 4, !dbg !62
  %cmp = icmp slt i32 %2, 0, !dbg !64
  br i1 %cmp, label %if.then, label %if.end, !dbg !65

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval, align 4, !dbg !66
  br label %return, !dbg !66

if.end:                                           ; preds = %entry
  br label %while.cond, !dbg !67

while.cond:                                       ; preds = %if.end7, %if.end
  %3 = load i8**, i8*** %hs.addr, align 8, !dbg !68
  %4 = load i32, i32* %i, align 4, !dbg !69
  %inc = add nsw i32 %4, 1, !dbg !69
  store i32 %inc, i32* %i, align 4, !dbg !69
  %idxprom = sext i32 %inc to i64, !dbg !68
  %arrayidx = getelementptr inbounds i8*, i8** %3, i64 %idxprom, !dbg !68
  %5 = load i8*, i8** %arrayidx, align 8, !dbg !68
  %cmp1 = icmp ne i8* %5, null, !dbg !70
  br i1 %cmp1, label %while.body, label %while.end, !dbg !67

while.body:                                       ; preds = %while.cond
  %6 = load i8*, i8** %needle.addr, align 8, !dbg !71
  %7 = load i8**, i8*** %hs.addr, align 8, !dbg !74
  %8 = load i32, i32* %i, align 4, !dbg !75
  %idxprom2 = sext i32 %8 to i64, !dbg !74
  %arrayidx3 = getelementptr inbounds i8*, i8** %7, i64 %idxprom2, !dbg !74
  %9 = load i8*, i8** %arrayidx3, align 8, !dbg !74
  %call4 = call i32 @strcmp(i8* %6, i8* %9) #4, !dbg !76
  %cmp5 = icmp eq i32 %call4, 0, !dbg !77
  br i1 %cmp5, label %if.then6, label %if.end7, !dbg !78

if.then6:                                         ; preds = %while.body
  %10 = load i32, i32* %i, align 4, !dbg !79
  store i32 %10, i32* %last, align 4, !dbg !81
  br label %if.end7, !dbg !82

if.end7:                                          ; preds = %if.then6, %while.body
  br label %while.cond, !dbg !67, !llvm.loop !83

while.end:                                        ; preds = %while.cond
  %11 = load i32, i32* %last, align 4, !dbg !85
  store i32 %11, i32* %retval, align 4, !dbg !86
  br label %return, !dbg !86

return:                                           ; preds = %while.end, %if.then
  %12 = load i32, i32* %retval, align 4, !dbg !87
  ret i32 %12, !dbg !87
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 !dbg !88 {
entry:
  %retval = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %call = call i32 @search_needle(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i64 0, i64 0), i8** getelem